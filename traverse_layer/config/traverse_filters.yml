traverse_layer:
  ros__parameters:

    input_topic: /grid_map
    output_topic: /filtered_map

    publish_latency: true

    costmap:
      topic: /costmap
      layer: traversability
      min: 0.0
      max: 1.0

    filters:
      filter1:
        name: buffer_normalizer
        type: gridMapFilters/BufferNormalizerFilter

      # filter2: # Duplicate layer.
      #   name: duplicate
      #   type: gridMapFilters/DuplicationFilter
      #   params:
      #     input_layer: ...
      #     output_layer: ...

      filter2:  # Fill holes in the map with inpainting.
        name: inpaint
        type: gridMapCv/InpaintFilter
        params:
          input_layer: elevation
          output_layer: elevation_inpainted
          radius: 0.05

      filter3:  # Reduce noise with a radial blurring filter.
        name: mean_in_radius
        type: gridMapFilters/MeanInRadiusFilter
        params:
          input_layer: elevation_inpainted
          output_layer: elevation_smooth
          radius: 0.06

      # filter5:  # Boxblur as an alternative to the inpaint and radial blurring filter above.
      #   name: boxblur
      #   type: gridMapFilters/SlidingWindowMathExpressionFilter
      #   params:
      #     input_layer: elevation
      #     output_layer: elevation_smooth
      #     expression: meanOfFinites(elevation)
      #     compute_empty_cells: true
      #     edge_handling: crop # options: inside, crop, empty, mean
      #     window_size: 5 # optional

      filter4:  # Compute surface normals.
        name: surface_normals
        type: gridMapFilters/NormalVectorsFilter
        params:
          input_layer: elevation_inpainted
          output_layers_prefix: normal_vectors_
          radius: 0.35
          normal_vector_positive_axis: z

      filter5:  # Add a color layer for visualization based on the surface normal.
        name: normal_color_map
        type: gridMapFilters/NormalColorMapFilter
        params:
          input_layers_prefix: normal_vectors_
          output_layer: normal_color

      filter6:  # Compute slope from surface normal.
        name: slope
        type: gridMapFilters/MathExpressionFilter
        params:
          output_layer: slope
          expression: acos(normal_vectors_z)

      filter7: # compute step size
        name: stepsize
        type: gridMapFilters/SlidingWindowMathExpressionFilter
        params:
          input_layer: elevation_inpainted
          output_layer: stepsize
          expression: maxOfFinites(elevation_inpainted) - minOfFinites(elevation_inpainted)
          compute_empty_cells: false
          edge_handling: crop
          window_length: 1.0

      # filter11: # Edge detection on elevation layer with convolution filter as alternative to filter above.
      #   name: edge_detection
      #   type: gridMapFilters/SlidingWindowMathExpressionFilter
      #   params:
      #     input_layer: elevation_inpainted
      #     output_layer: edges
      #     expression: 'sumOfFinites([0,1,0;1,-4,1;0,1,0].*elevation_inpainted)' # Edge detection.
      #     # expression: 'sumOfFinites([0,-1,0;-1,5,-1;0,-1,0].*elevation_inpainted)' # Sharpen.
      #     compute_empty_cells: false
      #     edge_handling: mean # options: inside, crop, empty, mean
      #     window_size: 3 # Make sure to make this compatible with the kernel matrix.

      filter8: # calculate traversability from slope
        name: traversability_slope
        type: gridMapFilters/MathExpressionFilter
        params:
          output_layer: traversability_slope
          expression: slope / 0.436332 # 25 degrees

      filter9: # calculate traversability from stepsize
        name: traversability_stepsize
        type: gridMapFilters/MathExpressionFilter
        params:
          output_layer: traversability_stepsize
          expression: stepsize / 0.46630765815 # 25 degrees

      filter10: # Compute traversability as normalized weighted sum of slope and roughness.
        name: traversability
        type: gridMapFilters/MathExpressionFilter
        params:
          output_layer: traversability
          expression: cwiseMax(traversability_slope, traversability_stepsize) #, 0.7 * traversability_slope + 0.3 traversability_stepsize)

      filter11:  # Set lower threshold on traversability.
        name: traversability_lower_threshold
        type: gridMapFilters/ThresholdFilter
        params:
          layer: traversability
          lower_threshold: 0.0
          set_to: 0.0

      filter12:  # Set upper threshold on traversability.
        name: traversability_upper_threshold
        type: gridMapFilters/ThresholdFilter
        params:
          layer: traversability
          upper_threshold: 1.0
          set_to: 1.0 # Other uses: .nan, .inf
